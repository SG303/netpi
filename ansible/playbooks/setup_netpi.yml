---
- hosts: localhost
  vars:
    ansible_user_id: "{{ lookup('env', 'USER') }}"

  vars_prompt:
    - name: "ansible_become_password"
      prompt: "Enter sudo password"
      private: true

  become: true
  become_method: sudo
  connection: local
  gather_facts: true

  tasks:
    - name: Set hostname
      hostname:
        name: netpi

    - name: Update host
      apt: update_cache=yes

    - name: Upgrade host
      apt: upgrade=dist

    - name: Install base packages
      apt:
        pkg:
          - htop
          - rsync
          - gpg
          - git
          - neovim
          - net-tools
          - gzip
          - curl
          - wget
          - sudo
          - ntp
          - unattended-upgrades
          - cockpit
          - nmap
          - iperf
          - iperf3
          - tcpdump
          - ipcalc
          - ncat
          - dnsutils
          - iptraf-ng
          - arp-scan
          - hping3
          - mtr
          - iftop
          - whois
          - fping
          - tshark
          - arping
          - tcptrack
          - slurm
          - ethtool
          - telnet
          - ngrep
          - bmon
          - darkstat
          - jnettop
          - dstat
          - nikto
          - speedtest-cli
          - iw
#          - aircrack-ng
        state: present

    - name: Install zsh
      apt:
        pkg:
          - zsh
        state: present
      when: install_ohmyzsh | bool

    - name: Remove existing Docker repository configurations
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
         - "/etc/apt/sources.list.d/docker.list"
         - "/etc/apt/sources.list.d/download_docker_com_linux_ubuntu.list"

    - name: Remove existing Docker GPG key
      ansible.builtin.file:
        path: /etc/apt/keyrings/docker.asc
        state: absent

    - name: Ensure keyrings directory exists
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Docker GPG apt Key
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'
        force: true

    - name: Add docker repo X86_64 for Ubuntu
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present
        filename: docker
      when:
      - ansible_facts['architecture'] == "x86_64"

    - name: Add docker repo ARM for Ubuntu
      ansible.builtin.apt_repository:
        repo: deb [arch=arm64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present
        filename: docker
      when:
        - ansible_facts['architecture'] == "aarch64"

    - name: Install docker packages
      apt:
        pkg:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
          - docker-buildx-plugin
        state: present

    - name: Add user to Docker group
      ansible.builtin.user:
        name: "{{ ansible_user_id }}"
        groups: docker
        append: true

    - name: Ensure /etc/netpi directory exists
      file:
        path: /etc/netpi
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Write username to /etc/netpi/username
      copy:
        content: "{{ ansible_user_id }}"
        dest: /etc/netpi/username
        owner: root
        group: root
        mode: '0644'

    - name: Create script to get IP address
      copy:
        dest: /usr/local/bin/get-ip-address
        content: |
          #!/bin/bash
          ip -4 addr show eth0 | grep inet | awk '{ print $2; }' | sed 's/\/.*$//' > /etc/netpi/ip_address
        owner: root
        group: root
        mode: '0755'
      when: dash_auto_ip | bool

    - name: Create systemd service to run script at boot
      copy:
        dest: /etc/systemd/system/get-ip-address.service
        content: |
          [Unit]
          Description=Get IP Address
          After=network.target

          [Service]
          ExecStart=/usr/local/bin/get-ip-address

          [Install]
          WantedBy=multi-user.target
        owner: root
        group: root
        mode: '0644'
      when: dash_auto_ip | bool

    - name: Enable and start get IP address service
      systemd:
        name: get-ip-address
        enabled: yes
        state: started
      when: dash_auto_ip | bool

    - name: Copy playbook
      copy:
        src: ./update_homer_dashboard.yml
        dest: /usr/local/bin/update_homer_dashboard.yml

    - name: Create script to run Ansible playbook
      copy:
        dest: /usr/local/bin/run-playbook
        content: |
          #!/bin/bash
          ansible-playbook /usr/local/bin/update_homer_dashboard.yml
        owner: root
        group: root
        mode: '0755'

    - name: Create systemd service to run script at boot
      copy:
        dest: /etc/systemd/system/run-playbook.service
        content: |
          [Unit]
          Description=Run Ansible Playbook
          After=network.target get-ip-address.service

          [Service]
          ExecStart=/usr/local/bin/run-playbook

          [Install]
          WantedBy=multi-user.target
        owner: root
        group: root
        mode: '0644'
      when: dash_auto_ip | bool

    - name: Enable and start run playbook service
      systemd:
        name: run-playbook
        enabled: yes
        state: started
      when: dash_auto_ip | bool

    - name: Write IP address to file
      copy:
        content: "{{ ansible_host }}"
        dest: /etc/netpi/ip_address

    - name: Copy files to destination directory
      copy:
        src: "{{ repo_path | default('/home/' + ansible_user_id) }}/netpi/docker"
        dest: "{{ data_path | default('/opt') }}"
        owner: "1000"
        group: "1000"

    - name: Copy Homer template
      template:
        src: "{{ repo_path | default('/home/' + ansible_user_id) }}/netpi/docker/homer/assets/config.yml.j2"
        dest: "{{ data_path | default('/opt') }}/docker/homer/assets/config.yml"
        owner: "1000"
        group: "1000"

    - name: Install oh-my-zsh
      shell: sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh) --unattended"
      args:
        executable: /bin/bash
      become_user: "{{ ansible_user_id }}"
      become: true
      ignore_errors: true
      when: install_ohmyzsh | bool

    - name: Clone zsh-syntax-highlighting repository
      git:
        repo: https://github.com/zsh-users/zsh-syntax-highlighting.git
        dest: "/home/{{ ansible_user_id }}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"
      become_user: "{{ ansible_user_id }}"
      become: true
      when: install_ohmyzsh | bool

    - name: Clone zsh-autosuggestions repository
      git:
        repo: https://github.com/zsh-users/zsh-autosuggestions.git
        dest: "/home/{{ ansible_user_id }}/.oh-my-zsh/custom/plugins/zsh-autosuggestions"
      become_user: "{{ ansible_user_id }}"
      become: true
      when: install_ohmyzsh | bool

    - name: Set theme in .zshrc
      lineinfile:
        path: "/home/{{ ansible_user_id }}/.zshrc"
        regexp: '^ZSH_THEME='
        line: 'ZSH_THEME="{{ ohmyzsh_theme }}"'
      become_user: "{{ ansible_user_id }}"
      become: true
      when: install_ohmyzsh | bool

    - name: Enable plugins in .zshrc
      lineinfile:
        path: "/home/{{ ansible_user_id }}/.zshrc"
        regexp: '^plugins='
        line: 'plugins=({{ ohmyzsh_plugins }})'
      become_user: "{{ ansible_user_id }}"
      become: true
      when: install_ohmyzsh | bool

    - name: Change default shell to zsh for the user
      user:
        name: "{{ ansible_user_id }}"
        shell: /bin/zsh
      become: true
      when: install_ohmyzsh | bool

    - name: Configure unattended upgrades
      blockinfile:
        path: /etc/apt/apt.conf.d/50unattended-upgrades
        block: |
          Unattended-Upgrade::Allowed-Origins {
              "${distro_id}:${distro_codename}";
              {% if security_updates_only %}
              "${distro_id}:${distro_codename}-security";
              {% else %}
              "${distro_id}:${distro_codename}-updates";
              {% endif %}
          };
          Unattended-Upgrade::Automatic-Reboot "{{ automatic_reboot | lower }}";
        marker: "// {mark} ANSIBLE MANAGED BLOCK - unattended_upgrades settings"
        create: true
        mode: "0644"
        owner: root
        group: root

    - name: Enable or disable unattended upgrades
      copy:
        content: |
          APT::Periodic::Update-Package-Lists "1";
          APT::Periodic::Download-Upgradeable-Packages "1";
          APT::Periodic::AutocleanInterval "7";
          APT::Periodic::Unattended-Upgrade "{{ '1' if automatic_updates else '0' }}";
        dest: /etc/apt/apt.conf.d/20auto-upgrades
        mode: "0644"
        owner: root
        group: root

    - name: Run get ip script
      shell: /usr/local/bin/get-ip-address
      become: true
      when: dash_auto_ip | bool

    - name: Write dash_static_ip to a file
      ansible.builtin.copy:
        content: "{{ dash_static_ip }}"
        dest: "/etc/netpi/ip_address"
      when: not dash_auto_ip

    - name: Run copy homer dashboard script
      shell: /usr/local/bin/run-playbook
      become: true

    - name: Copy Wetty template
      template:
        src: "{{ repo_path | default('/home/' + ansible_user_id) }}/netpi/docker/wetty/docker-compose.yml"
        dest: "{{ data_path | default('/opt') }}/docker/wetty/docker-compose.yml"
        owner: "1000"
        group: "1000"

    - name: Copy Sftpgo template
      template:
        src: "{{ repo_path | default('/home/' + ansible_user_id) }}/netpi/docker/sftpgo/docker-compose.yml"
        dest: "{{ data_path | default('/opt') }}/docker/sftpgo/docker-compose.yml"
        owner: "1000"
        group: "1000"

    - name: Start Docker containers
      shell: docker compose up -d
      args:
        chdir: "{{ data_path | default('/opt') }}/docker/homer"
      become: true

    - name: Start Docker containers
      shell: docker compose up -d
      args:
        chdir: "{{ data_path | default('/opt') }}/docker/dockge"
      become: true